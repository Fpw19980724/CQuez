//C语言贪婪算法的背包问题
//背包问题的每件物品的最终价值是物品价值乘以物品的重量，特殊情况如下
//背包可拆分的意思是：如果放入第n件物品的时候超重了，那么可以让他的价值乘以剩余的背包的载重量
//此贪婪算法是基于冒泡排序下（从大到小）所解出来的局部最优解
//它肯定不是一个整体最优解，可以通过举例来论证
//在这里不给出例子


#include<stdio.h>
/*定义结构体物品*/
struct a
{
    int v,w;//v为价值w为物品重量
} a[11];
int main()
{
    int i,j,sum,s,m,n;
    struct a t;
    scanf("%d",&n);
    while(n--)
    {
        sum=0;
        scanf("%d%d",&s,&m);//s为物品个数，m，为背包容量
        for(i=0; i<s; i++)
            scanf("%d%d",&a[i].v,&a[i].w);
        
        /*特别注意冒泡排序输出从大到小*/
        
        for(i=0; i<s; i++)
        {
            for(j=i+1; j<s; j++)
            {
                if(a[j].v>a[i].v)
                {
                    t=a[j];
                    a[j]=a[i];
                    a[i]=t;
                }
            }
        }
        /*贪心算法核心*/
        for(i=0; i<s; i++)
        {
            if(m<a[i].w)
            {
                sum=sum+a[i].v*m;//背包可拆
                m=0;
                break;
            }
            else
            {
                sum=sum+a[i].v*a[i].w;
                m=m-a[i].w;
            }
        }
        printf("%d\n",sum);
    }
    return 0;
}
